{
	"comment": "Modified from vb.tmlanguage.json Originally modified by Cedric Youbi smookcreative.com",
	"fileTypes": [
		"st"
	],
	"keyEquivalent": "^~A",
	"name": "Structured Text",
	"patterns": [
		{
			"match": "\\n",
			"name": "meta.ending-space"
		},
		
		{
			"include": "#round-brackets"
		},
		{
			"begin": "^(?=\\t)",
			"end": "(?=[^\\t])",
			"name": "meta.leading-space",
			"patterns": [
				{
					"captures": {
						"1": {
							
							"name": "meta.odd-tab.tabs"
						},
						"2": {
							"name": "meta.even-tab.tabs"
						}
					},
					"match": "(\\t)(\\t)?"
				}
			]
		},
		{
			"begin": "^(?= )",
			"end": "(?=[^ ])",
			"name": "meta.leading-space",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.odd-tab.spaces"
						},
						"2": {
							"name": "meta.even-tab.spaces"
						}
					},
					"match": "(  )(  )?"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.function.st"
				},
				"2": {
					"name": "entity.name.function.st"
				},
				"3": {
					"name": "punctuation.definition.parameters.st"
				},
				"4": {
					"name": "variable.parameter.function.st"
				},
				"5": {
					"name": "punctuation.definition.parameters.st"
				}
			},
			"match": "^\\s*((?i:implementation|interface))\\s*([a-zA-Z_]\\w*)\\s*(\\()([^)]*)(\\)).*\\n?",
			"name": "meta.function.st"
		},
		{
			"begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.st"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.st"
						}
					},
					"end": "\\n",
					"name": "comment.line.apostrophe.st"
					
				}
			]
		},


		{
			"match": "(?i:\\b(IF|THEN|ELSE|ELSIF|END_IF|WHILE|DO|END_WHILE|REPEAT|END_REPEAT|UNTIL|FOR|END_FOR|BY|TO|CASE|END_CASE|RETURN|EXIT)\\b)",
			"name": "keyword.control.st"
		},
		
		 {	
			"match": "(?i:\\b(AND|NOT|OR|XOR|&)\\b)",
			"name": "support.class.collection.st"
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.st"
				},
				"2": {
					"name": "variable.other.bfeac.st"
				},
				"3": {
					"name": "meta.separator.comma.st"
				}
			}
			
			
		},
		{
			"match": "(?i:\\s*\\b(VAR|VAR_TEMP|PROGRAM|END_PROGRAM|IMPLEMENTATION|END_IMPLEMENTATION|INTERFACE|END_INTERFACE|FUNCTION_BLOCK|END_FUNCTION_BLOCK|GOTO)\\b\\s*)",
			"name": "storage.type.st"
		},
		
		{
			"match": "(?i:\\s*\\b(FALSE|NULL|TRUE|ALWAYS)\\b)",
			"name": "constant.language.st"
		},
		{
			"match": "(?i:(?<=: )(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b))",
			"name": "support.function.st"
			
		},
		
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.st"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.st"
				}
			},
			"name": "string.quoted.double.st",
			"patterns": [
				{
					"match": "\"\"",
					"name": "constant.character.escape.doubleslash.st"
				}
			]
		},
		{
			"captures": {
				"1": {
				
					"name": "punctuation.definition.variable.st"
				}
			},
			"match": "(\\$)[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b\\s*",
			"name": "variable.other.st"
		},
		{
			"match": "(?i:\\b(VAR_GLOBAL|END_VAR|VAR_INPUT|VAR_OUTPUT|LABEL|END_LABEL|TYPE|END_TYPE)\\b)",
			"name": "support.type.st"
		},
	
		{
			"match": "(?i:\\b(SIN|LIMIT|ABS|ACOS|ASIN|ATAN|CONCAT|COS|EXP|EXPD|EXPT|FIND|INSERT|LEFT|LEN|LIMIT|LN|LOG|MAW|MID|MIN|MUX|RIGHT|ROL|ROR|RTC|SEL|SHL|SHR|TAN|TRUNC|VAR_GLOBAL|END_VAR|VAR_INPUT|VAR_OUTPUT|LABEL|END_LABEL|TYPE|END_TYPE)\\b)",
			"name": "support.function.st"
		},
		
		
		{
			"match": "(?i:\\b(ANYOBJECT_TO_BIGBYTEARRAY|ANYOBJECT_TO_LITTLEBYTEARRAY|ASIN|ATAN|BIGBYTEARRAY_TOANYTYPE|BOOL_TO_BYTE|BOOL_TO_DWORD|BOOL_TO_WORD|BOOL_VALUE_TO_DINT|BOOL_VALUE_TO_INT|BOOL_VALUE_TO_LREAL|BOOL_VALUE_TO_REAL|BOOL_VALUE_TO_SINT|BOOL_VALUE_TO_UDINT|BOOL_VALUE_TO_UINT|BOOL_VALUE_TO_USINT|BYTE_TO_BOOL|BYTE_TO_DINT|BYTE_TO_DWORD|BYTE_TO_INT|BYTE_TO_SINT|BYTE_TO_UDINT|BYTE_TO_UINT|BYTE_TO_USINT|BYTE_TO_WORD|BYTE_VALUE_TO_LREAL|BYTE_VALUE_TO_REAL|DINT_TO_BYTE|DINT_TO_DWORD|DINT_TO_INT|DINT_TO_LREAL|DINT_TO_REAL|DINT_TO_SINT|DINT_TO_STRING|DINT_TO_UDINT|DINT_TO_UINT|DINT_TO_USINT|DINT_TO_WORD|DINT_VALUE_TO_BOOL)\\b)",
			"name": "support.function.st"
		},
		{
			"match": "(?i:\\b(DWORD_TO_BOOL|DWORD_TO_BYTE|DWORD_TO_DINT|DWORD_TO_INT|DWORD_TO_REAL|DWORD_TO_SINT|DWORD_TO_UDINT|DWORD_TO_UINT|DWORD_TO_USINT|DWORD_TO_WORD|DWORD_VALUE_TO_LREAL|DWORD_VALUE_TO_REAL|INT_TO_BYTE|INT_TO_DINT|INT_TO_DWORD|INT_TO_LREAL|INT_TO_REAL|INT_TO_SINT|INT_TO_TIME|INT_TO_UDINT|INT_TO_UINT|INT_TO_USINT|INT_TO_WORD|INT_VALUE_TO_BOOL|LREAL_TO_DINT|LREAL_TO_INT|LREAL_TO_REAL|LREAL_TO_SINT|LREAL_TO_STRING|LREAL_TO_UDINT|LREAL_TO_UINT|USINT|LREAL_VALUE_TO_BOOL|LREAL_VALUE_TO_BYTE|LREAL_VALUE_TO_DWORD|LREAL_VALUE_TO_WORD|REAL_TO_DINT|REAL_TO_DWORD|REAL_TO_INT|REAL_TO_LREAL|REAL_TO_SINT|REAL_TO_STRING|REAL_TO_TIME|REAL_TO_UDINT|REAL_TO_UINT|REAL_TO_USINT|REAL_VALUE_TO_BOOL|REAL_VALUE_TO_BYTE|REAL_VALUE_TO_DWORD|REAL_VALUE_TO_WORD)\\b)",
			"name": "support.function.st"
		},
		{
			"match": "(?i:\\b(SINT_TO_BYTE|SINT_TO_DINT|SINT_TO_DWORD|SINT_TO_INT|SINT_TO_LREAL|SINT_TO_REAL|SINT_TO_UDINT|SINT_TO_UINT|SINT_TO_USINT|SINT_TO_WORD|SINT_VALUE_TO_BOOL|STRING_TO_DINT|STRING_TO_LREAL|STRINT_TO_REAL|STRINT_TO_UDINT|TIME_TO_INT|TIME_TO_REAL|UDINT_TO_BYTE|UDINT_TO_DINT|UDINT_TO_DWORD|UDINT_TO_INT|UDINT_TO_LREAL|UDINT_TO_REAL|UDINT_TO_SINT|UDINT_TO_STRING|UDINT_TO_UINT|UDINT_TO_USINT|UDINT_TO_WORD|UDINT_VALUE_TO_BOOL|UINT_TO_BYTE|UINT_TO_DINT|DWORD|UINT_TO_INT|UINT_TO_LREAL|UINT_TO_REAL|UINT_TO_SINT|UINT_TO_UDINT|UINT_TO_USINT|UINT_TO_WORD|UINT_VALUE_TO_BOOL|USINT_TO_BYTE|USINT_TO_DINT|USINT_TO_DWORD|USINT_TO_INT|USINT_TO_LREAL|USINT_TO_REAL|USINT_TO_SINT|USINT_TO_UDINT|USINT_TO_UDINT|USINT_TO_UINT|USINT_TO_WORD|USINT_VALUE_TO_BOOL|WORD_TO_BOOL|WORD_TO_BYTE|WORD_TO_DINT|WORD_TO_DWORD|WORD_TO_INT|WORD_TO_SINT|WORD_TO_UDINT|WORD_TO_UINT|WORD_TO_USINT|WORD_VALUE_TO_LREAL|WORD_VALUE_TO_REAL)\\b)",
			"name": "support.function.st"
		},
		{
			"match": "-?\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\\b",
			"name": "constant.numeric.st"
		},

		{
			
			"captures": {
				"1": {
					"name": "entity.name.function.st"
				}
			},
			"match": "(?i:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)(?=\\(\\)?))",
			"name": "support.function.st"
		},
		
		{
			"match": ":=|!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b",
			"name": "keyword.operator.js"
		}
		
	],
	"repository": {
		"round-brackets": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.round-brackets.begin.st"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.round-brackets.end.st"
				}
			},
			"name": "meta.round-brackets",
			"patterns": [
				{
					"include": "source.st"
				}
			]
		}
	},
	"scopeName": "structured text",
	"uuid": "7F9C9343-D48E-4E7D-BFE8-F680714DCD3E",
	"version": "https://github.com/textmate/asp.vb.net.tmbundle/commit/72d44550b3286d0382d7be0624140cf97857ff69"
}